import React, { useState, useEffect } from 'react';

const Conseils = ({ language = 'fr' }) => {
  const [selectedCrop, setSelectedCrop] = useState('tomate');
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(true);

  const translations = {
    fr: {
      title: "Conseils",
      loading: "Chargement",
      selectCrop: "S√©lectionnez une culture",
      recommendationsFor: "Recommandations pour",
      tipOfDay: "Conseil du jour",
      hotDayTip: "Par temps chaud, arrosez t√¥t le matin ou tard le soir pour √©viter l'√©vaporation.",
      normalDayTip: "C'est un bon moment pour planter et entretenir vos cultures.",
      waterEarly: "Arrosez t√¥t le matin pour une meilleure absorption",
      useCompost: "Utilisez du compost naturel pour enrichir le sol",
      avoidPesticides: "√âvitez les pesticides chimiques, privil√©giez les solutions naturelles",
      crops: {
        tomate: "Tomate",
        ble: "Bl√©",
        olive: "Olive"
      },
      weather: {
        sunny: "Ensoleill√©",
        cloudy: "Nuageux",
        rainy: "Pluvieux"
      },
      tomato: {
        highTemp: "Temp√©rature √©lev√©e d√©tect√©e - ombrez vos tomates",
        normalTemp: "Temp√©rature id√©ale pour la croissance des tomates",
        rainExpected: "Pluie attendue - prot√©gez vos tomates de l'humidit√©",
        noRain: "Pas de pluie pr√©vue - arrosage manuel recommand√©"
      },
      wheat: {
        highHumidity: "Humidit√© √©lev√©e - surveillez les maladies fongiques",
        normalHumidity: "Conditions optimales pour le bl√©",
        generalTip: "Le bl√© n√©cessite un sol bien drain√©"
      },
      olive: {
        hotWeather: "Temps chaud - les oliviers sont r√©sistants √† la s√©cheresse",
        normalWeather: "Conditions normales pour les oliviers",
        pruningTip: "Taillez les oliviers en hiver pour favoriser la production"
      }
    },
    en: {
      title: "Advice",
      loading: "Loading",
      selectCrop: "Select a crop",
      recommendationsFor: "Recommendations for",
      tipOfDay: "Tip of the day",
      hotDayTip: "In hot weather, water early morning or late evening to avoid evaporation.",
      normalDayTip: "This is a good time to plant and maintain your crops.",
      waterEarly: "Water early morning for better absorption",
      useCompost: "Use natural compost to enrich the soil",
      avoidPesticides: "Avoid chemical pesticides, prefer natural solutions",
      crops: {
        tomate: "Tomato",
        ble: "Wheat",
        olive: "Olive"
      },
      weather: {
        sunny: "Sunny",
        cloudy: "Cloudy",
        rainy: "Rainy"
      },
      tomato: {
        highTemp: "High temperature detected - shade your tomatoes",
        normalTemp: "Ideal temperature for tomato growth",
        rainExpected: "Rain expected - protect your tomatoes from humidity",
        noRain: "No rain expected - manual watering recommended"
      },
      wheat: {
        highHumidity: "High humidity - monitor for fungal diseases",
        normalHumidity: "Optimal conditions for wheat",
        generalTip: "Wheat requires well-drained soil"
      },
      olive: {
        hotWeather: "Hot weather - olive trees are drought resistant",
        normalWeather: "Normal conditions for olive trees",
        pruningTip: "Prune olive trees in winter to promote production"
      }
    },
    ar: {
      title: "ŸÜÿµÿßÿ¶ÿ≠",
      loading: "ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ",
      selectCrop: "ÿßÿÆÿ™ÿ± ŸÖÿ≠ÿµŸàŸÑ",
      recommendationsFor: "ÿ™ŸàÿµŸäÿßÿ™ ŸÑŸÄ",
      tipOfDay: "ŸÜÿµŸäÿ≠ÿ© ÿßŸÑŸäŸàŸÖ",
      hotDayTip: "ŸÅŸä ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ≠ÿßÿ±ÿå ÿßÿ≥ŸÇŸê ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠ ÿßŸÑÿ®ÿßŸÉÿ± ÿ£Ÿà ÿßŸÑŸÖÿ≥ÿßÿ° ÿßŸÑŸÖÿ™ÿ£ÿÆÿ± ŸÑÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ™ÿ®ÿÆÿ±.",
      normalDayTip: "Ÿáÿ∞ÿß ŸàŸÇÿ™ ÿ¨ŸäÿØ ŸÑÿ≤ÿ±ÿßÿπÿ© ŸàÿµŸäÿßŸÜÿ© ŸÖÿ≠ÿßÿµŸäŸÑŸÉ.",
      waterEarly: "ÿßÿ≥ŸÇŸê ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠ ÿßŸÑÿ®ÿßŸÉÿ± ŸÑÿßŸÖÿ™ÿµÿßÿµ ÿ£ŸÅÿ∂ŸÑ",
      useCompost: "ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ≥ŸÖÿßÿØ ÿßŸÑÿ∑ÿ®ŸäÿπŸä ŸÑÿ•ÿ´ÿ±ÿßÿ° ÿßŸÑÿ™ÿ±ÿ®ÿ©",
      avoidPesticides: "ÿ™ÿ¨ŸÜÿ® ÿßŸÑŸÖÿ®ŸäÿØÿßÿ™ ÿßŸÑŸÉŸäŸÖŸäÿßÿ¶Ÿäÿ©ÿå ŸÅÿ∂ŸÑ ÿßŸÑÿ≠ŸÑŸàŸÑ ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ©",
      crops: {
        tomate: "ÿ∑ŸÖÿßÿ∑ŸÖ",
        ble: "ŸÇŸÖÿ≠",
        olive: "ÿ≤Ÿäÿ™ŸàŸÜ"
      },
      weather: {
        sunny: "ŸÖÿ¥ŸÖÿ≥",
        cloudy: "ÿ∫ÿßÿ¶ŸÖ",
        rainy: "ŸÖŸÖÿ∑ÿ±"
      },
      tomato: {
        highTemp: "ÿ™ŸÖ ÿßŸÉÿ™ÿ¥ÿßŸÅ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿπÿßŸÑŸäÿ© - ÿ∏ŸÑŸÑ ÿ∑ŸÖÿßÿ∑ŸÖŸÉ",
        normalTemp: "ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ŸÖÿ´ÿßŸÑŸäÿ© ŸÑŸÜŸÖŸà ÿßŸÑÿ∑ŸÖÿßÿ∑ŸÖ",
        rainExpected: "ŸÖÿ∑ÿ± ŸÖÿ™ŸàŸÇÿπ - ÿßÿ≠ŸÖŸê ÿ∑ŸÖÿßÿ∑ŸÖŸÉ ŸÖŸÜ ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ©",
        noRain: "ŸÑÿß ŸÖÿ∑ÿ± ŸÖÿ™ŸàŸÇÿπ - ÿßŸÑÿ±Ÿä ÿßŸÑŸäÿØŸàŸä ŸÖŸàÿµŸâ ÿ®Ÿá"
      },
      wheat: {
        highHumidity: "ÿ±ÿ∑Ÿàÿ®ÿ© ÿπÿßŸÑŸäÿ© - ÿ±ÿßŸÇÿ® ÿßŸÑÿ£ŸÖÿ±ÿßÿ∂ ÿßŸÑŸÅÿ∑ÿ±Ÿäÿ©",
        normalHumidity: "ÿ∏ÿ±ŸàŸÅ ŸÖÿ´ÿßŸÑŸäÿ© ŸÑŸÑŸÇŸÖÿ≠",
        generalTip: "ÿßŸÑŸÇŸÖÿ≠ Ÿäÿ™ÿ∑ŸÑÿ® ÿ™ÿ±ÿ®ÿ© ÿ¨ŸäÿØÿ© ÿßŸÑÿµÿ±ŸÅ"
      },
      olive: {
        hotWeather: "ÿ∑ŸÇÿ≥ ÿ≠ÿßÿ± - ÿ£ÿ¥ÿ¨ÿßÿ± ÿßŸÑÿ≤Ÿäÿ™ŸàŸÜ ŸÖŸÇÿßŸàŸÖÿ© ŸÑŸÑÿ¨ŸÅÿßŸÅ",
        normalWeather: "ÿ∏ÿ±ŸàŸÅ ÿ∑ÿ®ŸäÿπŸäÿ© ŸÑÿ£ÿ¥ÿ¨ÿßÿ± ÿßŸÑÿ≤Ÿäÿ™ŸàŸÜ",
        pruningTip: "ÿßŸÇÿ∑ÿπ ÿ£ÿ¥ÿ¨ÿßÿ± ÿßŸÑÿ≤Ÿäÿ™ŸàŸÜ ŸÅŸä ÿßŸÑÿ¥ÿ™ÿßÿ° ŸÑÿ™ÿπÿ≤Ÿäÿ≤ ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨"
      }
    }
  };

  const t = translations[language] || translations.fr;

  // Simuler la r√©cup√©ration des donn√©es m√©t√©o (en r√©alit√©, vous devriez les passer en props ou utiliser un contexte)
  useEffect(() => {
    const fetchWeather = async () => {
      try {
        // Simulation de donn√©es m√©t√©o
        const mockWeather = {
          temperature: 24,
          conditions: 'sunny',
          rainProbability: 10,
          humidity: 65
        };
        setWeatherData(mockWeather);
      } catch (error) {
        console.error("Erreur de chargement des donn√©es m√©t√©o", error);
      } finally {
        setLoading(false);
      }
    };

    fetchWeather();
  }, []);

  // Conseils bas√©s sur la culture et la m√©t√©o
  const getCropSpecificAdvice = () => {
    if (!weatherData) return [];
    
    const generalTips = [
      t.waterEarly,
      t.useCompost,
      t.avoidPesticides
    ];

    const cropTips = {
      tomate: [
        weatherData.temperature > 25 ? t.tomato.highTemp : t.tomato.normalTemp,
        weatherData.rainProbability > 30 ? t.tomato.rainExpected : t.tomato.noRain
      ],
      ble: [
        weatherData.humidity > 70 ? t.wheat.highHumidity : t.wheat.normalHumidity,
        t.wheat.generalTip
      ],
      olive: [
        weatherData.temperature > 30 ? t.olive.hotWeather : t.olive.normalWeather,
        t.olive.pruningTip
      ]
    };

    return [...generalTips, ...(cropTips[selectedCrop] || [])];
  };

  const adviceList = getCropSpecificAdvice();

  if (loading) {
    return <div style={styles.loading}>{t.loading}...</div>;
  }

  return (
    <div style={styles.container}>
      <h2 style={styles.title}>{t.title} üå±</h2>
      
      <div style={styles.weatherBanner}>
        <div style={styles.weatherInfo}>
          <span>üå°Ô∏è {weatherData.temperature}¬∞C</span>
          <span>‚òÄÔ∏è {t.weather[weatherData.conditions]}</span>
          <span>üíß {weatherData.rainProbability}%</span>
        </div>
      </div>

      <div style={styles.cropSelector}>
        <label style={styles.label}>{t.selectCrop}:</label>
        <select 
          value={selectedCrop}
          onChange={(e) => setSelectedCrop(e.target.value)}
          style={styles.select}
        >
          <option value="tomate">{t.crops.tomate}</option>
          <option value="ble">{t.crops.ble}</option>
          <option value="olive">{t.crops.olive}</option>
        </select>
      </div>

      <div style={styles.adviceContainer}>
        <h3 style={styles.subtitle}>
          {t.recommendationsFor} {t.crops[selectedCrop]}
        </h3>
        
        <ul style={styles.adviceList}>
          {adviceList.map((advice, index) => (
            <li key={index} style={styles.adviceItem}>
              <span style={styles.bullet}>‚ú¶</span>
              <span style={styles.adviceText}>{advice}</span>
            </li>
          ))}
        </ul>
      </div>

      <div style={styles.tipOfTheDay}>
        <h3 style={styles.tipTitle}>{t.tipOfDay}</h3>
        <p style={styles.tipContent}>
          {weatherData.temperature > 25 
            ? t.hotDayTip
            : t.normalDayTip}
        </p>
      </div>
    </div>
  );
};

const styles = {
  container: {
    maxWidth: '800px',
    margin: '0 auto',
    padding: '20px',
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    backgroundColor: '#f9f9f9',
    borderRadius: '10px',
    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
  },
  title: {
    color: '#2c7a3d',
    textAlign: 'center',
    marginBottom: '30px',
    fontSize: '2rem',
    fontWeight: '600'
  },
  weatherBanner: {
    backgroundColor: '#e3f2fd',
    padding: '15px',
    borderRadius: '8px',
    marginBottom: '25px',
    display: 'flex',
    justifyContent: 'center'
  },
  weatherInfo: {
    display: 'flex',
    gap: '20px',
    fontSize: '1.1rem'
  },
  cropSelector: {
    marginBottom: '25px',
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  label: {
    fontSize: '1.1rem',
    fontWeight: '500'
  },
  select: {
    padding: '8px 12px',
    borderRadius: '5px',
    border: '1px solid #ddd',
    fontSize: '1rem',
    minWidth: '150px'
  },
  adviceContainer: {
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '8px',
    marginBottom: '25px',
    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.05)'
  },
  subtitle: {
    color: '#2c7a3d',
    marginTop: '0',
    marginBottom: '15px',
    fontSize: '1.3rem'
  },
  adviceList: {
    listStyleType: 'none',
    paddingLeft: '0'
  },
  adviceItem: {
    padding: '10px 0',
    borderBottom: '1px solid #eee',
    display: 'flex',
    alignItems: 'flex-start',
    gap: '10px'
  },
  bullet: {
    color: '#4caf50',
    fontSize: '1.2rem'
  },
  adviceText: {
    fontSize: '1.1rem',
    lineHeight: '1.5'
  },
  tipOfTheDay: {
    backgroundColor: '#fff8e1',
    padding: '20px',
    borderRadius: '8px',
    borderLeft: '5px solid #ffc107'
  },
  tipTitle: {
    color: '#e65100',
    marginTop: '0',
    marginBottom: '10px'
  },
  tipContent: {
    fontSize: '1.1rem',
    lineHeight: '1.5',
    margin: '0'
  },
  loading: {
    textAlign: 'center',
    padding: '20px',
    fontSize: '1.2rem'
  }
};

export default Conseils;